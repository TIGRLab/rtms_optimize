#!/bin/bash

#ARGUMENTS:
#	subject			BIDS subject name, will be used as output folder and suffix in simnibs output
#				folder. simnibs output folder is $SUBJECTS_DIR environment variable
#	metric			Metric file in MNI space
#	ciftify			Subject ciftify base directory
#	outdir			Output base directory, will create <subject>/* sub-structure in here

#DESCRIPTION:
#Wrapper script for transforming metric data starting from MNI volumetric space to simnibs/freesurfer volume space as a cortical ribbon.
#
#STAGES:
#1. Volume --> Surface mapping
#2. Surface-based resampling into native freesurfer mesh
#3. Ribbon-constrained Surface --> Volume mapping 
# The outputs of this script can be used for tetrahedral Volume --> FEM projection
#
#INPUT STRUCTURE
#	House-cleaning functions

close(){
	STATUS=$?
	if [ "$STATUS" == 0 ]; then
		echo "ribbon_projection finished, Exiting..."
	else
		echo "ribbon_projection failed!"
		echo "Exiting!"
		exit 1
	fi

}

stdprint(){
	echo "#######################"
	echo "$1"
	echo "#######################"
}

checkvar(){

	if  [ -z "$1" ]; then

		echo "$2 doesn't exist!"
		exit 1

	fi

}

trap close EXIT

#	STAGE 0: Check inputs and create pre-requisite directories
subject=$1
metric=$2
ciftify=$3
outdir=$4

checkvar "$subject" subject
checkvar "$metric" metric
checkvar "$ciftify" ciftify
checkvar "$outdir" outdir
checkvar "$SUBJECTS_DIR" SUBJECTS_DIR

#Set some convenience paths
atlasspacenative="$ciftify/MNINonLinear/Native/"
fs164k="$ciftify/MNINonLinear/"
surfs_dir="$outdir/$subject/surfs"

mkdir -p "$outdir/$subject"

#	STAGE 1: Convert Freesurfer outputs into GIFTI format
mkdir -p "$outdir/$subject/surfs"
for h in 'lh' 'rh'; do
	"$RTMSBIN/simfs_to_gifti" "$subject" "$h" "$surfs_dir"
done

#	STAGE 2: Register simnibs/freesurfer surfaces to ciftify 
for h in 'lh' 'rh'; do
	"$RTMSBIN/register_fs_to_ciftify" "$subject" "$h" "$surfs_dir"
done

#	STAGE 3: Map metric to AtlasSpaceNative, resample to 164k, resample to simfs, ribbon project to volume
mkdir -p "$outdir/$subject/func"

for h in 'L' 'R'; do

	#Map metric --> AtlasSpaceNative surface
	stdprint "Mapping Metric volume --> AtlasSpaceNative"
	metric_surface="$outdir/$subject/func/$subject.$h.zmap.native.shape.gii"
	wb_command -volume-to-surface-mapping "$metric" \
		"$atlasspacenative/${subject}.$h.midthickness.native.surf.gii" \
		"$metric_surface" \
		-ribbon-constrained \
		"$atlasspacenative/${subject}.$h.white.native.surf.gii" \
		"$atlasspacenative/${subject}.$h.pial.native.surf.gii"

	#AtlasSpaceNative --> fs_LR_164k resample
	stdprint "Mapping AtlasSpaceNative --> fs_LR_164k"
	resampled_metric_164k="$outdir/$subject/func/$subject.$h.zmap.fs_LR_164k.shape.gii"
	wb_command -metric-resample "$metric_surface" \
		"$atlasspacenative/${subject}.$h.sphere.MSMSulc.native.surf.gii" \
		"$fs164k/${subject}.$h.sphere.164k_fs_LR.surf.gii" \
		"BARYCENTRIC" \
		"$resampled_metric_164k"

	#fs_LR_164k --> simfs resample
	stdprint "Mapping fs_LR_164k --> SimFS"
	resampled_metric_simfs="$outdir/$subject/func/$subject.$h.zmap.simfs.shape.gii"
	wb_command -metric-resample "$resampled_metric_164k" \
		"$fs164k/${subject}.$h.sphere.164k_fs_LR.surf.gii" \
		"$surfs_dir/fs_${subject}.$h.sphere.reg_msm.surf.gii" \
		"BARYCENTRIC" \
		"$resampled_metric_simfs"

	#Theoretically here you'd insert the FC python script computation

	#Use ribbon based projection (maybe test fnirt to T1w, then surface?)
	stdprint "Projecting SimFS --> Volume"
	simfs_ribbon="$outdir/$subject/func/$subject.$h.zmap.simfs.nii.gz"
	wb_command -metric-to-volume-mapping "$resampled_metric_simfs" \
		"$surfs_dir/fs_${subject}.$h.midthickness.surf.gii" \
		"$SUBJECTS_DIR/m2m_${subject}/T1fs_nu_conform.nii.gz" \
		-ribbon-constrained \
		"$surfs_dir/fs_${subject}.$h.white.surf.gii" \
		"$surfs_dir/fs_${subject}.$h.pial.surf.gii" \
		"$simfs_ribbon" 
		
done

#Sum up the results
rib_L="$outdir/$subject/func/$subject.L.zmap.simfs.nii.gz"
rib_R="$outdir/$subject/func/$subject.R.zmap.simfs.nii.gz"
fslmaths "$rib_L" -add "$rib_R" "$outdir/$subject/func/$subject.zmap.simfs.nii.gz"
